# log_interaction.py
#
# This module contains the function for Layer 1 of the agent's memory: The Raw Log.
# It is responsible for appending a timestamped record of every user-agent
# interaction to a text file.

from datetime import datetime

def log_interaction(user_prompt: str, agent_response: str):
    """
    Appends a single user-agent interaction to the raw log file.

    This function serves as the first layer of memory, creating an immutable,
    chronological record of the agent's entire conversational history.

    Args:
        user_prompt (str): The exact input provided by the user.
        agent_response (str): The exact response generated by the agent.
    """
    # Define the path to the log file.
    log_file_path = "raw_log.txt"

    # Get the current time with microsecond precision for accurate ordering.
    # The ISO 8601 format is a standard that is both machine-readable and human-friendly.
    timestamp = datetime.now().isoformat()

    # Use a 'with' statement to handle the file operations.
    # This ensures the file is automatically closed even if errors occur.
    # Mode 'a+' means: 'a' for append, '+' to create the file if it doesn't exist.
    try:
        with open(log_file_path, "a+", encoding="utf-8") as log_file:
            # Write the structured log entry to the file.
            log_file.write("--- Interaction Start ---\n")
            log_file.write(f"Timestamp: {timestamp}\n")
            log_file.write(f"User: {user_prompt}\n")
            log_file.write(f"Agent: {agent_response}\n")
            log_file.write("--- Interaction End ---\n\n")
    except IOError as e:
        # Basic error handling in case the file cannot be written to.
        print(f"Error: Could not write to log file at {log_file_path}. Exception: {e}")

# --- Example Usage (for testing purposes) ---
if __name__ == "__main__":
    print("Testing Layer 1: The Raw Log...")
    
    # Simulate a user prompt and an agent response.
    example_user_prompt = "What is the status of the memory system?"
    example_agent_response = "Layer 1 logging is now operational. Awaiting instructions for Layer 2."
    
    # Call the function to log the interaction.
    log_interaction(example_user_prompt, example_agent_response)
    
    print(f"Successfully logged test interaction to 'raw_log.txt'.")